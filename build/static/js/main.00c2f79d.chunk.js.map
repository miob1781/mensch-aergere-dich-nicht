{"version":3,"sources":["features/board/GetField.js","features/start/StartSlice.js","features/board/BoardFunctions.js","features/board/BoardSlice.js","Store.js","features/start/Player.js","features/start/StartButton.js","features/start/Display.js","features/start/Start.js","features/board/Field.js","features/board/CreateDice.js","features/board/Dice.js","features/board/Board.js","features/ExecutiveFunction.js","App.js","index.js"],"names":["startSlice","createSlice","name","initialState","gameOn","players","yellow","plays","computerPlays","red","green","blue","reducers","toggleGameOn","state","action","togglePlayerPlays","player","payload","toggleComputerPlays","selectParticipatingPlayers","start","participatingPlayers","push","selectComputerOn","playerOn","board","selectReadyToClickOnDice","computerOn","diceThrown","gotMoves","readyToCleanUp","actions","createField","field","fields","i","index","type","color","row","column","alert","getField","getStartFields","startFieldsForPlayer","playerStart","playerHome","getFig","num","figIndex","fieldIndex","getPositions","positions","numFigsOut","lastFreeHomeField","fieldColors","boardSlice","boardFields","startFields","homeFields","moves","moveFields","dice","goToNextPlayer","diceCount","hasWon","mouseOverMoveFrom","figIndexMouse","updateBoardFields","updateStartFields","updateHomeFields","updatePositions","updateFieldAfterDiceThrown","isMoveFrom","isMoveTo","executeMove","updateFieldAfterMove","playerOnField","updatePosition","changeNumFigsOut","decrementLastFreeHomeField","pos","fig","find","f","setMoves","setMoveFields","throwDice","result","Math","floor","random","setDiceThrown","setGotMoves","setReadyToCleanUp","cleanUp","setGoToNextPlayer","getNextPlayer","nextIndex","indexOf","length","getInitialPlayer","initialPlayerIndex","incrementDiceCount","resetDiceCount","setHasWon","winner","setMouseOver","setMouseOut","resetValues","store","configureStore","reducer","startReducer","boardReducer","Form","styled","form","Radio","div","Player","props","dispatch","useDispatch","useSelector","handleRadio","id","onChange","checked","for","value","disabled","style","marginRight","Bttn","button","StartButton","cloneDeep","buttonDisabled","backgroundColor","cursor","onClick","includes","homeFieldsForPlayer","DisplayContainer","Display","text","playerNames","nextPlayerText","hasWonText","StartContainer","Start","display","map","Field","borderColor","borderWidth","borderStyle","readyToMove","displayDottedBorder","fieldColor","FieldContainer","getFieldContainer","onMouseOver","window","onMouseOut","DiceContainer","getDiceDot","key","visibility","Dot","getDiceDots","diceDots","j","Dice","right","bottom","diceResult","readyToClickOnDice","diceWhite","useState","isPlaying","setIsPlaying","onPhone","innerWidth","animation","onAnimationEnd","BoardContainer","Board","getTestidParticle","array","getFieldComponents","ExecutiveFunction","getMoveValues","typeField","nextField","entryFieldIndex","nextFieldIndex","typeNextField","winning","updateFieldObject","oppPlayer","oppFig","oppFieldObject","oppPlayerObject","checkHit","updateNextFieldAfterMoveObject","updatePositionObject","updateNextFieldObject","moveRating","currentIndex","count","progress","getMoves","exitFieldIndex","onEntryField","movesArray","moveFieldsArray","move","moveFromEntryField","passExitField","useEffect","bestMove","bestMoveRating","computerMoves","forEach","mf","AppBody","body","Header","header","Main","main","Footer","footer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wGAkBA,I,kDChBMA,EAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVC,QAAQ,EACRC,QAAS,CACLC,OAAQ,CACJC,OAAO,EACPC,eAAe,GAEnBC,IAAK,CACDF,OAAO,EACPC,eAAe,GAEnBE,MAAO,CACHH,OAAO,EACPC,eAAe,GAEnBG,KAAM,CACFJ,OAAO,EACPC,eAAe,KAI3BI,SAAU,CACNC,aAAc,SAACC,EAAOC,GAClBD,EAAMV,QAAUU,EAAMV,QAE1BY,kBAAmB,SAACF,EAAOC,GACvB,IAAME,EAASF,EAAOG,QACtBJ,EAAMT,QAAQY,GAAQV,OAASO,EAAMT,QAAQY,GAAQV,OAEzDY,oBAAqB,SAACL,EAAOC,GACzB,IAAME,EAASF,EAAOG,QACtBJ,EAAMT,QAAQY,GAAQT,eAAiBM,EAAMT,QAAQY,GAAQT,kBAK5DY,EAA6B,SAAAN,GACtC,IAAMT,EAAUS,EAAMO,MAAMhB,QACtBiB,EAAuB,GAC7B,IAAK,IAAIL,KAAUZ,EACXA,EAAQY,GAAQV,OAChBe,EAAqBC,KAAKN,GAGlC,OAAOK,GAGEE,EAAmB,SAAAV,GAC5B,IAAMW,EAAWX,EAAMY,MAAMD,SAE7B,OADmBX,EAAMO,MAAMhB,QAAQoB,GAAUjB,eAIxCmB,EAA2B,SAAAb,GACpC,IAAMc,EAAaJ,EAAiBV,GAEpC,OAD2BA,EAAMO,MAAMjB,SAAWwB,IAAed,EAAMY,MAAMG,aAAef,EAAMY,MAAMI,WAAahB,EAAMY,MAAMK,gBAItH/B,IAAf,QACO,EAA+DA,EAAWgC,QAAnEnB,EAAP,EAAOA,aAAcG,EAArB,EAAqBA,kBAAmBG,EAAxC,EAAwCA,oB,QD/DzCc,EAAc,WAChB,IAAMC,EAAQ,CACdA,MAAc,KACdA,KAAa,KACbA,MAAc,KACdA,OAAe,KACfA,IAAY,KACZA,OAAe,KACfA,SAAiB,GACjBA,YAAmB,EACnBA,UAAiB,EACjBA,YAAoB,MACpB,OAAOA,GAILC,EAAS,GACNC,EAAI,EAAGA,EAAI,GAAIA,IAAI,CACxB,IAAMF,EAAQD,IAId,OAHAC,EAAMG,MAAQD,EACdF,EAAMI,KAAO,aACbJ,EAAMK,MAAQ,QACPH,GACH,KAAK,EACDF,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,EACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,EACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,EACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,EACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,EACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,EACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,EACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,GACf,MACJ,KAAK,EACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,GACf,MACJ,KAAK,EACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,GACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,GACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,GACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,GACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,GACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,GACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,GACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,GACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,KAAK,GACDP,EAAMM,IAAM,EACZN,EAAMO,OAAS,EACf,MACJ,QACIC,MAAM,uCAEdP,EAAOZ,KAAKW,GAGhB,IAAMS,EAAW,SAACN,EAAOC,EAAMrB,EAAQuB,EAAKC,GACxC,IAAMP,EAAQD,IAMd,OALAC,EAAMG,MAAQA,EACdH,EAAMI,KAAOA,EACbJ,EAAMK,MAAQtB,EACdiB,EAAMM,IAAMA,EACZN,EAAMO,OAASA,EACRP,GAGLU,EAAiB,SAAC3B,EAAQuB,EAAKC,GACjC,IAAII,EAAuB,CAAC,MAK5B,OAJAA,EAAqBtB,KAAKoB,EAAS,EAAG,aAAc1B,EAAQuB,EAAKC,IACjEI,EAAqBtB,KAAKoB,EAAS,EAAG,aAAc1B,EAAQuB,EAAM,EAAGC,IACrEI,EAAqBtB,KAAKoB,EAAS,EAAG,aAAc1B,EAAQuB,EAAKC,EAAS,IAC1EI,EAAqBtB,KAAKoB,EAAS,EAAG,aAAc1B,EAAQuB,EAAM,EAAGC,EAAS,IACvEI,GAILC,EAAc,CAChBxC,OAAQsC,EAAe,SAAU,EAAG,IACpCnC,IAAKmC,EAAe,MAAO,GAAI,IAC/BlC,MAAOkC,EAAe,QAAS,GAAI,GACnCjC,KAAMiC,EAAe,OAAQ,EAAG,IAI9BG,EAAa,CACfzC,OAAQ,CAAC,MACTG,IAAK,CAAC,MACNC,MAAO,CAAC,MACRC,KAAM,CAAC,OAGXoC,EAAWzC,OAAOiB,KAAKoB,EAAS,EAAG,YAAa,SAAU,EAAG,IAC7DI,EAAWzC,OAAOiB,KAAKoB,EAAS,EAAG,YAAa,SAAU,EAAG,IAC7DI,EAAWzC,OAAOiB,KAAKoB,EAAS,EAAG,YAAa,SAAU,EAAG,IAC7DI,EAAWzC,OAAOiB,KAAKoB,EAAS,EAAG,YAAa,SAAU,EAAG,IAC7DI,EAAWtC,IAAIc,KAAKoB,EAAS,EAAG,YAAa,MAAO,EAAG,KACvDI,EAAWtC,IAAIc,KAAKoB,EAAS,EAAG,YAAa,MAAO,EAAG,IACvDI,EAAWtC,IAAIc,KAAKoB,EAAS,EAAG,YAAa,MAAO,EAAG,IACvDI,EAAWtC,IAAIc,KAAKoB,EAAS,EAAG,YAAa,MAAO,EAAG,IACvDI,EAAWrC,MAAMa,KAAKoB,EAAS,EAAG,YAAa,QAAS,GAAI,IAC5DI,EAAWrC,MAAMa,KAAKoB,EAAS,EAAG,YAAa,QAAS,EAAG,IAC3DI,EAAWrC,MAAMa,KAAKoB,EAAS,EAAG,YAAa,QAAS,EAAG,IAC3DI,EAAWrC,MAAMa,KAAKoB,EAAS,EAAG,YAAa,QAAS,EAAG,IAC3DI,EAAWpC,KAAKY,KAAKoB,EAAS,EAAG,YAAa,OAAQ,EAAG,IACzDI,EAAWpC,KAAKY,KAAKoB,EAAS,EAAG,YAAa,OAAQ,EAAG,IACzDI,EAAWpC,KAAKY,KAAKoB,EAAS,EAAG,YAAa,OAAQ,EAAG,IACzDI,EAAWpC,KAAKY,KAAKoB,EAAS,EAAG,YAAa,OAAQ,EAAG,IE3NzD,I,oBAlBMK,EAAS,SAACC,EAAKhC,GACjB,MAAO,CACHiC,SAAUD,EACVhC,OAAQA,EACRqB,KAAM,aACNa,WAAYF,IAIdG,EAAe,SAAAnC,GAEjB,IADA,IAAIoC,EAAY,GACPJ,EAAI,EAAGA,EAAI,EAAGA,IACnBI,EAAU9B,KAAKyB,EAAOC,EAAKhC,IAE/B,OAAOoC,GAGEA,EAAY,GACzB,MAAmB,CAAC,SAAU,MAAO,QAAS,QAA9C,eAAuD,CAAlD,IAAIpC,EAAM,KACXoC,EAAUpC,GAAU,CAChBoC,UAAWD,EAAanC,GACxBqC,WAAY,EACZC,kBAAmB,GAKpB,I,IAAMC,EAAc,CACvBlD,OAAQ,WACRG,IAAK,SACLC,MAAO,aACPC,KAAM,aC9BJ8C,EAAaxD,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVuD,YAAavB,EACbwB,YAAab,EACbc,WAAYb,EACZM,UAAWA,EACXQ,MAAO,GACPC,WAAY,GACZC,KAAM,EACNtC,SAAU,OACVI,YAAY,EACZC,UAAU,EACVC,gBAAgB,EAChBiC,gBAAgB,EAChBC,UAAW,EACXC,OAAQ,KACRC,mBAAmB,EACnBC,cAAe,MAEnBxD,SAAU,CACNyD,kBAAmB,SAACvD,EAAOC,GACvBD,EAAM4C,YAAc3C,EAAOG,SAE/BoD,kBAAmB,SAACxD,EAAOC,GACvBD,EAAM6C,YAAc5C,EAAOG,SAE/BqD,iBAAkB,SAACzD,EAAOC,GACtBD,EAAM8C,WAAa7C,EAAOG,SAE9BsD,gBAAiB,SAAC1D,EAAOC,GACrBD,EAAMuC,UAAYtC,EAAOG,SAE7BuD,2BAA4B,SAAC3D,EAAOC,GAChC,IACImB,EADJ,EAAwEnB,EAAOG,QAAxEiC,EAAP,EAAOA,WAAYb,EAAnB,EAAmBA,KAAMoC,EAAzB,EAAyBA,WAAYC,EAArC,EAAqCA,SAAUzB,EAA/C,EAA+CA,SAAU0B,EAAzD,EAAyDA,YAEnDnD,EAAWX,EAAMW,UAEnBS,EADS,eAATI,EACQxB,EAAM4C,YAAYP,GACV,eAATb,EACCxB,EAAM6C,YAAYlC,GAAU0B,GAE5BrC,EAAM8C,WAAWnC,GAAU0B,IAEjCuB,WAAaA,EACnBxC,EAAMyC,SAAWA,EACjBzC,EAAMgB,SAAS3B,KAAK2B,GACpBhB,EAAM0C,YAAcA,GAExBC,qBAAsB,SAAC/D,EAAOC,GAC1B,IACW+D,EADX,EAAmC/D,EAAOG,QAAnCiC,EAAP,EAAOA,WAAYb,EAAnB,EAAmBA,KAAMrB,EAAzB,EAAyBA,OAEhB6D,EAAT7D,GAAkDH,EAAMW,UAC3C,eAATa,EACQxB,EAAM4C,YAAYP,GACV,eAATb,EACCxB,EAAM6C,YAAYmB,GAAe3B,GAEjCrC,EAAM8C,WAAWkB,GAAe3B,IAEtClC,OAASA,GAEnB8D,eAAgB,SAACjE,EAAOC,GACpB,MAA2FA,EAAOG,QAA3FD,EAAP,EAAOA,OAAQiC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,WAAYb,EAArC,EAAqCA,KAAM0C,EAA3C,EAA2CA,iBAAkBC,EAA7D,EAA6DA,2BACvDC,EAAMpE,EAAMuC,UAAUpC,GACtBkE,EAAMD,EAAI7B,UAAU+B,MAAK,SAAAC,GAAC,OAAIA,EAAEnC,WAAaA,KACnDiC,EAAIhC,WAAaA,EACjBgC,EAAI7C,KAAOA,EACc,cAArB0C,EACAE,EAAI5B,aACwB,cAArB0B,GACPE,EAAI5B,aAEJ2B,GACAC,EAAI3B,qBAGZ+B,SAAU,SAACxE,EAAOC,GACdD,EAAM+C,MAAQ9C,EAAOG,SAEzBqE,cAAe,SAACzE,EAAOC,GACnBD,EAAMgD,WAAa/C,EAAOG,SAE9BsE,UAAW,SAAC1E,EAAOC,GACf,IAAM0E,EAASC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAC/C9E,EAAMiD,KAAO0B,GAEjBI,cAAe,SAAC/E,EAAOC,GACnBD,EAAMe,WAAad,EAAOG,SAE9B4E,YAAa,SAAChF,EAAOC,GACjBD,EAAMgB,SAAWf,EAAOG,SAE5B6E,kBAAmB,SAACjF,EAAOC,GACvBD,EAAMiB,eAAiBhB,EAAOG,SAElC8E,QAAS,SAAClF,EAAOC,GACb,IACImB,EADJ,cAA2BnB,EAAOG,QAAlC,GAAOiC,EAAP,KAAmBb,EAAnB,MAGIJ,EADS,eAATI,EACQxB,EAAM4C,YAAYP,GACV,eAATb,EACCxB,EAAM6C,YAAY7C,EAAMW,UAAU0B,GAElCrC,EAAM8C,WAAW9C,EAAMW,UAAU0B,IAEvCuB,YAAa,EACnBxC,EAAMyC,UAAW,EACjBzC,EAAM0C,YAAc,KACpB1C,EAAMgB,SAAW,IAErB+C,kBAAmB,SAACnF,EAAOC,GACvBD,EAAMkD,eAAiBjD,EAAOG,SAElCgF,cAAe,SAACpF,EAAOC,GACnB,IAAMO,EAAuBP,EAAOG,QAC9BO,EAAWX,EAAMW,SAEjB0E,GADe7E,EAAqB8E,QAAQ3E,GAChB,GAAKH,EAAqB+E,OAC5DvF,EAAMW,SAAWH,EAAqB6E,IAE1CG,iBAAkB,SAACxF,EAAOC,GACtB,IAAMO,EAAuBP,EAAOG,QAC9BqF,EAAqBb,KAAKC,MAAMD,KAAKE,SAAWtE,EAAqB+E,QAC3EvF,EAAMW,SAAWH,EAAqBiF,IAE1CC,mBAAoB,SAAC1F,EAAOC,GACxBD,EAAMmD,aAEVwC,eAAgB,SAAC3F,EAAOC,GACpBD,EAAMmD,UAAY,GAEtByC,UAAW,SAAC5F,EAAOC,GACf,IAAM4F,EAAS5F,EAAOG,QACtBJ,EAAMoD,OAASyC,GAEnBC,aAAc,SAAC9F,EAAOC,GAClBD,EAAMqD,mBAAoB,EAC1BrD,EAAMsD,cAAgBrD,EAAOG,SAEjC2F,YAAa,SAAC/F,EAAOC,GACjBD,EAAMqD,mBAAoB,EAC1BrD,EAAMsD,cAAgB,MAE1B0C,YAAa,SAAChG,EAAOC,GACjBD,EAAMe,YAAa,EACnBf,EAAMgB,UAAW,EACjBhB,EAAMiB,gBAAiB,EACvBjB,EAAMkD,gBAAiB,EACvBlD,EAAMoD,OAAS,KACfpD,EAAMqD,mBAAoB,MAKvBV,IAAf,QACO,EAwBHA,EAAWzB,QAvBXqC,EADG,EACHA,kBACAC,EAFG,EAEHA,kBACAC,EAHG,EAGHA,iBACAC,EAJG,EAIHA,gBACAC,EALG,EAKHA,2BACAI,EANG,EAMHA,qBACAE,EAPG,EAOHA,eACAO,EARG,EAQHA,SACAC,EATG,EASHA,cACAC,EAVG,EAUHA,UACAK,EAXG,EAWHA,cACAC,EAZG,EAYHA,YACAC,GAbG,EAaHA,kBACAC,GAdG,EAcHA,QACAE,GAfG,EAeHA,cACAD,GAhBG,EAgBHA,kBACAK,GAjBG,EAiBHA,iBACAE,GAlBG,EAkBHA,mBACAC,GAnBG,EAmBHA,eACAC,GApBG,EAoBHA,UACAE,GArBG,EAqBHA,aACAC,GAtBG,EAsBHA,YACAC,GAvBG,EAuBHA,YCnLSC,GAAQC,YAAe,CAChCC,QAAS,CACL5F,MAAO6F,EACPxF,MAAOyF,K,QCHTC,GAAOC,IAAOC,KAAV,qDAIJC,GAAQF,IAAOG,IAAV,oDAIJ,SAASC,GAAOC,GACnB,IAAOzG,EAAUyG,EAAVzG,OAED0G,EAAWC,cACXvH,EAAUwH,aAAY,SAAA/G,GAAK,OAAIA,EAAMO,MAAMhB,WAM3CyH,EAAc,WAChBH,EAASxG,EAAoBF,KAGjC,OACI,gBAACmG,GAAD,CAAM,cAAa,UAAYnG,EAA/B,UACI,wBACIqB,KAAK,WACLyF,GAAI9G,EACJf,KAAMe,EACN+G,SAdW,WACnBL,EAAS3G,EAAkBC,KAcnBgH,QAAS5H,EAAQY,GAAQV,QAE7B,wBAAO2H,IAAKjH,EAAZ,SArBa,CAACX,OAAQ,SAAUG,IAAK,MAAOC,MAAO,QAASC,KAAM,QAqBhCM,KAClC,wBACA,gBAACsG,GAAD,WACI,wBACIjF,KAAK,QACLyF,GAAI,SAAW9G,EACff,KAAM,SAAWe,EACjBkH,MAAM,QACNH,SAAUF,EACVG,SAAU5H,EAAQY,GAAQT,cAC1B4H,UAAW/H,EAAQY,GAAQV,QAE/B,wBAAO8H,MAAO,CAACC,YAAa,QAASJ,IAAK,SAAWjH,EAArD,mBACA,wBACIqB,KAAK,QACLyF,GAAI,YAAc9G,EAClBf,KAAM,SAAWe,EACjBkH,MAAM,WACNH,SAAUF,EACVG,QAAS5H,EAAQY,GAAQT,cACzB4H,UAAW/H,EAAQY,GAAQV,MAC3B,cAAaU,EAAS,cAE1B,wBAAOiH,IAAK,YAAcjH,EAA1B,4B,2BC5CVsH,GAAOlB,IAAOmB,OAAV,uJAQH,SAASC,KACZ,IAAMd,EAAWC,cACXxH,EAASyH,aAAY,SAAA/G,GAAK,OAAIA,EAAMO,MAAMjB,UAC1CsD,EAAcgF,qBAAUb,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMgC,gBACzDC,EAAc+E,qBAAUb,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMiC,gBACzDC,EAAa8E,qBAAUb,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMkC,eACxDtC,EAAuBuG,YAAYzG,GAGrCuH,EAAiBrH,EAAqB+E,OAAS,EAC7CgC,EAAQM,EAAiB,CAACC,gBAAiB,OAAQC,OAAQ,WAAa,KAoC9E,OAAO,eAACN,GAAD,CACHjG,KAAK,SACLwG,QAnCiB,WACjB,IAAK,IAAIjG,KAAwBc,EAAa,CAAC,IAAD,iBACxBA,EAAYd,IADY,IAC1C,2BAAqD,CAAC,IAA7CX,EAA4C,QAC5CA,IAGDZ,EAAqByH,SAAS7G,EAAMK,OACpCL,EAAMjB,OAASiB,EAAMK,MAErBL,EAAMjB,OAAS,OARmB,+BADvB,qBAaLyC,GAbK,IAavB,2BAA+B,SACrBzC,OAAS,MAdI,8BAgBvB,IAAK,IAAI+H,KAAuBpF,EAAY,CAAC,IAAD,iBACtBA,EAAWoF,IADW,IACxC,2BAAmD,CAAC,IAA3C9G,EAA0C,QAC1CA,IAGTA,EAAMjB,OAAS,OALyB,+BAQ5C0G,EAAStD,EAAkBX,IAC3BiE,EAASrD,EAAkBX,IAC3BgE,EAASpD,EAAiBX,IAC1B+D,EAASnD,EAAgBnB,IACzBsE,EAASrB,GAAiBhF,IAC1BqG,EAASb,MACTa,EAAS9G,MAMTuH,SAAUO,EACVN,MAAOA,EACP,cAAa,eALV,SAMLjI,EAAS,WAAa,UCvE5B,I,GAAM6I,GAAmB5B,IAAOG,IAAV,qDAIf,SAAS0B,KACZ,IAQIC,EARE/I,EAASyH,aAAY,SAAA/G,GAAK,OAAIA,EAAMO,MAAMjB,UAC1CqB,EAAWoG,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMD,YAC5CyC,EAAS2D,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMwC,UAC1CkF,EAAc,CAAC9I,OAAQ,SAAUG,IAAK,MAAOC,MAAO,QAASC,KAAM,QAEnE0I,EAAc,eAAWD,EAAY3H,GAAvB,YACd6H,EAAU,2BAAuBF,EAAYlF,GAAnC,aAShB,OAHsCiF,EAHjC/I,EAGA8D,EAAwCoF,EAAxBD,EARD,+EAYhB,eAACJ,GAAD,UACI,6BAAIE,MCnBhB,I,MAAMI,GAAiBlC,IAAOG,IAAV,2IAOb,SAASgC,KACZ,IAAMpJ,EAASyH,aAAY,SAAA/G,GAAK,OAAIA,EAAMO,MAAMjB,UAGhD,OACI,gBAACmJ,GAAD,WACI,sBAAKlB,MAAO,CAACoB,QAASrJ,EAAQ,OAAS,SAAvC,SAJW,CAAC,SAAU,MAAO,QAAS,QAKtBsJ,KAAI,SAAAzI,GAAM,OAAI,eAACwG,GAAD,CAAQxG,OAAQA,SAE9C,eAACwH,GAAD,IACA,eAACS,GAAD,OCnBL,SAASS,GAAMjC,GAClB,IAiCIkC,EAAaC,EAAaC,EAjCvBzH,EAAmCqF,EAAnCrF,MAAOG,EAA4BkF,EAA5BlF,IAAKC,EAAuBiF,EAAvBjF,OAAQH,EAAeoF,EAAfpF,KAAMC,EAASmF,EAATnF,MAC3BoF,EAAWC,cAGX1F,EAAQ2F,aAAY,SAAA/G,GAStB,MAPa,eAATwB,EACQxB,EAAMY,MAAMgC,YAAYrB,GAChB,eAATC,EACCxB,EAAMY,MAAMiC,YAAYpB,GAAOF,GAE/BvB,EAAMY,MAAMkC,WAAWrB,GAAOF,MAIvCpB,EAAuDiB,EAAvDjB,OAAQyD,EAA+CxC,EAA/CwC,WAAYC,EAAmCzC,EAAnCyC,SAAUzB,EAAyBhB,EAAzBgB,SAAU0B,EAAe1C,EAAf0C,YACzCmF,EAAclC,aAAY,SAAA/G,GAAK,OAAI4D,GAAc5D,EAAMY,MAAMI,YAC7DkI,EAAsBnC,aAAY,SAAA/G,GACpC,IAAMW,EAAWX,EAAMY,MAAMD,SACvBG,EAAad,EAAMO,MAAMhB,QAAQoB,GAAUjB,cACjD,OAAOmE,GAAY7D,EAAMY,MAAMyC,oBAAsBvC,GAAcsB,EAAS6F,SAASjI,EAAMY,MAAM0C,kBAE/F3C,EAAWoG,aAAY,SAAA/G,GAAK,OAAIkJ,EAAsBlJ,EAAMY,MAAMD,SAAW,QAG/EwI,EAAa1H,EACbtB,EACAgJ,EAAahJ,EACI,UAAVsB,IACP0H,EAAazG,EAAYjB,IAKzByH,GACAJ,EAAcnI,EACdoI,EAAc,MACdC,EAAc,UACPzH,EAAQ,KAAO,GACtBuH,EAAc,QACdC,EAAc,MACdC,EAAc,UAEdF,EAAc,OACdC,EAAc,OACdC,EAAc,QAIlB,IAGMI,EPnBuB,SAAC1H,EAAKC,EAAQwH,EAAYL,EAAaC,EAAaC,EAAajB,GAC9F,OAAOxB,IAAOG,IAAd,qWACsBhF,EACGC,EAELmH,EACAC,EACAC,EACIG,EACVpB,EAE0B,UAAhBe,EAA0B,QAAU,QOQrCO,CACnB3H,EACAC,EACAwH,EACAL,EACAC,EACAC,EATWC,EAAc,UAAY,WA6BzC,OACI,eAACG,EAAD,CACIE,YAlBgB,WAChBL,KAAiB,iBAAkBM,SACnC1C,EAASf,GAAa1D,EAAS,MAiB/BoH,WAbe,WACnB3C,EAASd,OAaLiC,QAVY,WACZiB,GACAnF,OC7EL,I,GAAM2F,GAAgBlD,IAAOG,IAAV,23BAoCpBgD,GAAa,SAACC,EAAKjI,EAAKC,EAAQsB,GAClC,IAAI2G,EAAa,SACjB,OAAO3G,GACH,KAAK,EACW,KAAR0G,IACAC,EAAa,WAEjB,MACJ,KAAK,EACW,KAARD,GAAsB,KAARA,IACdC,EAAa,WAEjB,MACJ,KAAK,EACW,KAARD,GAAsB,KAARA,GAAsB,KAARA,IAC5BC,EAAa,WAEjB,MACJ,KAAK,EACW,KAARD,GAAsB,KAARA,GAAsB,KAARA,GAAsB,KAARA,IAC1CC,EAAa,WAEjB,MACJ,KAAK,EACW,KAARD,GAAsB,KAARA,GAAsB,KAARA,GAAsB,KAARA,GAAsB,KAARA,IACxDC,EAAa,WAEjB,MACJ,KAAK,EACW,KAARD,GAAsB,KAARA,GAAsB,KAARA,GAAsB,KAARA,GAAsB,KAARA,GAAsB,KAARA,IACtEC,EAAa,WAEjB,MACJ,QAAShI,MAAM,WAEnB,IAAMiI,EAAMtD,IAAOG,IAAV,yLACahF,EACGC,EAGPiI,GAElB,OAAO,eAACC,EAAD,GAAUF,IAGRG,GAAc,SAAA7G,GAGvB,IAFA,IACI0G,EADAI,EAAW,GAENzI,EAAE,EAAGA,EAAE,EAAGA,IACf,IAAK,IAAI0I,EAAE,EAAGA,EAAE,EAAGA,IACfL,EAAU,GAAJrI,EAAS0I,EACfD,EAAStJ,KAAKiJ,GAAWC,EAAKrI,EAAG0I,EAAG/G,IAG5C,OAAO8G,GCtFJ,SAASE,KACZ,IAQIC,EAAOC,EARLtD,EAAWC,cACXsD,EAAarD,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMqC,QAC9CtC,EAAWoG,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMD,YAC5C0J,EAAqBtD,YAAYlG,GACjCyJ,EAAYvD,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMG,YAAcf,EAAMY,MAAMI,YAC7E,EAAkCuJ,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAIMC,EAAUnB,OAAOoB,YAAc,IACpB,WAAbhK,GACAuJ,EAAQQ,EAAU,QAAU,SAC5BP,EAASO,EAAU,OAAS,SACR,QAAb/J,GACPuJ,EAAQQ,EAAU,QAAU,SAC5BP,EAASO,EAAU,QAAU,UACT,UAAb/J,GACPuJ,EAAQQ,EAAU,OAAS,QAC3BP,EAASO,EAAU,QAAU,WAE7BR,EAAQQ,EAAU,OAAS,QAC3BP,EAASO,EAAU,OAAS,SAGhC,IAAMnD,EAAQ,CACV2C,MAAOA,EACPC,OAAQA,EACRpC,OAAQsC,EAAqB,UAAY,UACzCvC,gBAAiBwC,EAAY,QAAU,YACvCM,UAAWJ,EAAY,kDAAoD,SAW/E,OACI,eAACf,GAAD,CACIzB,QAVY,WACdqC,IACFI,GAAa,GACb5D,EAASnC,KACTmC,EAAS9B,GAAc,MAOnBwC,MAAOA,EACP,cAAa,OACbsD,eAAgB,WAAOJ,GAAa,IAJxC,SAMKX,GAAYM,KCjDzB,I,YAAMU,GAAiBvE,IAAOG,IAAV,qhBAqBb,SAASqE,KACZ,IAAMC,EAAoB,SAAAC,GACtB,OAAIA,IAAU5J,EACH,SACA4J,IAAUjJ,EACV,cAEA,cAITkJ,EAAqB,SAAAD,GACvB,OACIA,EAAMrC,KAAI,SAAAxH,GACN,OAAKA,EAGE,eAACyH,GAAD,CAEH,cAAamC,EAAkBC,GAAS7J,EAAMK,MAAQL,EAAMG,MAC5DG,IAAKN,EAAMM,IACXC,OAAQP,EAAMO,OACdJ,MAAOH,EAAMG,MACbC,KAAMJ,EAAMI,KACZC,MAAOL,EAAMK,OANRL,EAAMG,OAHJ,SAevB,OACI,gBAACuJ,GAAD,WACI,eAACb,GAAD,IACCiB,EAAmB7J,GACnB6J,EAAmBlJ,EAAYxC,QAC/B0L,EAAmBlJ,EAAYrC,KAC/BuL,EAAmBlJ,EAAYpC,OAC/BsL,EAAmBlJ,EAAYnC,MAC/BqL,EAAmBjJ,EAAWzC,QAC9B0L,EAAmBjJ,EAAWtC,KAC9BuL,EAAmBjJ,EAAWrC,OAC9BsL,EAAmBjJ,EAAWpC,SC9CpC,SAASsL,KACZ,IAAMtE,EAAWC,cACXlE,EAAcmE,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMgC,eAC/CE,EAAaiE,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMkC,cAC9CP,EAAYwE,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAM2B,aAC7C6H,EAAarD,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMqC,QAC9CE,EAAY4D,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMuC,aAC7C7D,EAASyH,aAAY,SAAA/G,GAAK,OAAIA,EAAMO,MAAMjB,UAC1CyD,EAAQgE,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMmC,SACzCC,EAAa+D,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMoC,cAC9CrC,EAAWoG,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMD,YAC5CI,EAAagG,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMG,cAC9CC,EAAW+F,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMI,YAC5CC,EAAiB8F,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMK,kBAClDiC,EAAiB6D,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMsC,kBAClDE,EAAS2D,aAAY,SAAA/G,GAAK,OAAIA,EAAMY,MAAMwC,UAC1C5C,EAAuBuG,YAAYzG,GACnCQ,EAAaiG,YAAYrG,GA0BzB0K,EAAgB,SAAC/I,EAAYgJ,EAAWC,EAAWlJ,EAAUK,EAAmB8I,GAClF,IAAMC,EAAiBF,EAAU/J,MAC3BkK,EAAgBH,EAAU9J,KAC5B0C,EAAmB,KACnBC,GAA6B,EAC7BuH,GAAU,EACI,eAAdL,IACAnH,EAAmB,aAED,cAAlBuH,GAAiCD,IAAmB/I,IACpD0B,GAA6B,EACH,IAAtB1B,IACAiJ,GAAU,IAGlB,IAAMC,EAAoB,CACtBtJ,WAAYA,EACZb,KAAM6J,EACNzH,YAAY,EACZC,UAAU,EACVzB,SAAUA,EACV0B,YAAa,YA5CJ,SAAAwH,GACb,GAAIA,EAAUnL,OAAQ,CAClB,IAAMyL,EAAYN,EAAUnL,OACtB0L,EAAStJ,EAAUqJ,GAAWrJ,UAAU+B,MAAK,SAAAD,GAAG,OAAIA,EAAIhC,aAAeiJ,EAAU/J,OAAsB,eAAb8C,EAAI7C,QAC9FsK,EAAiB,CACnBzJ,WAAYwJ,EAAOzJ,SACnBZ,KAAM,aACNrB,OAAQyL,GAENG,EAAkB,CACpB5L,OAAQyL,EACRxJ,SAAUyJ,EAAOzJ,SACjBC,WAAYwJ,EAAOzJ,SACnBZ,KAAM,aACN0C,iBAAkB,YAClBC,4BAA4B,GAEhC0C,EAAS9C,EAAqB+H,IAC9BjF,EAAS5C,EAAe8H,KA2BpBC,CAASV,GACT,IAKMW,EAAiC,CACnC5J,WAAYmJ,EACZhK,KAAMiK,EACNtL,OAAQQ,GAENuL,EAAuB,CACzB/L,OAAQQ,EACRyB,SAAUA,EACVC,WAAYmJ,EACZhK,KAAMiK,EACNvH,iBAAkBA,EAClBC,2BAA4BA,GAEhC0C,EAAS9C,EAlB0B,CAC/B1B,WAAYA,EACZb,KAAM6J,EACNlL,OAAQ,QAgBZ0G,EAAS9C,EAAqBkI,IAC9BpF,EAAS5C,EAAeiI,IACxBrF,EAAS7B,GAAY,IACrB6B,EAAS5B,IAAkB,IACvByG,GACA7E,EAASjB,GAAUjF,IAGnBkG,EADc,eAAdwE,EACS1F,KAEAR,IAAkB,MAIjCgH,EAAwB,CAC1B9J,WAAYmJ,EACZhK,KAAMiK,EACN7H,YAAY,EACZC,UAAU,EACVzB,SAAUA,EACV0B,YAAa,MAEjB+C,EAASlD,EAA2BgI,IACpC9E,EAASlD,EAA2BwI,IAGpC,IAAIC,EAAa,EACjB,GAAItL,EACA,GAAIqD,EACAiI,GAAc,QACX,GAAsB,cAAlBX,EACPW,GAAc,MACX,CACCd,EAAUnL,SACViM,GAAc,GAKlB,IAHA,IAAIC,EAAehK,EACfiK,EAAQ,EACNC,EAAW3H,KAAKC,OAAO2G,EAAiBD,GAAmB,GAAK,IAAM,EACrEe,EAAQ,IACN1J,EAAYyJ,GAAclM,QAAUyC,EAAYyJ,GAAclM,SAAWQ,GACvE0L,EAAe,KAAO,KACzBD,GAAcG,GAEG,IAAjBF,EACAA,EAAe,GAEfA,IAEJC,IAIJ,IAFAD,EAAeb,EACfc,EAAQ,EACDA,EAAQ,IACN1J,EAAYyJ,GAAclM,QAAUyC,EAAYyJ,GAAclM,SAAWQ,GACvE0L,EAAe,KAAO,KACzBD,GAAcG,GAEG,IAAjBF,EACAA,EAAe,GAEfA,IAEJC,IAEJF,GAAcG,EAGtB,MAAO,CAACZ,EAAkB7H,YAAasI,IAKrCI,EAAW,WACb,IADmB,EACbpI,EAAM7B,EAAU5B,GAGhB4K,EAFc,CAAC/L,OAAQ,EAAGG,IAAK,GAAIC,MAAO,GAAIC,KAAM,IAEtBc,GAC9B8L,EAFa,CAACjN,OAAQ,GAAIG,IAAK,EAAGC,MAAO,GAAIC,KAAM,IAEvBc,GAC5B+L,EAAe9J,EAAY2I,GAAiBpL,SAAWQ,EACzDgM,EAAa,GACbC,EAAkB,GARH,eAWHxI,EAAI7B,WAXD,yBAWV8B,EAXU,QAYTjC,EAAWiC,EAAIjC,SACfC,EAAagC,EAAIhC,WACnBmJ,OAAc,EAAEF,OAAS,EAG7B,GAAiB,eAAbjH,EAAI7C,KACJ,GAAmB,IAAf4I,GAAqBsC,GAUlB,GAAItI,EAAI5B,WAAa4B,EAAI3B,oBAAsB,EAOlD,OANkB,IAAdU,GACA0D,EAASlB,MACTkB,EAASzB,GAAc5E,KAEvBqG,EAASnB,MAEP,CAAN,cAjBmC,CAGnC,IADA4F,EAAY1I,EADZ4I,EAAiBD,IAEHpL,SAAWQ,EACrB,iBAEJ,IAAMkM,EAAOzB,EAAc/I,EAAYgC,EAAI7C,KAAM8J,EAAWlJ,EAAUgC,EAAI3B,kBAAmB8I,GAC7FoB,EAAWlM,KAAKoM,GAChBD,EAAgBnM,KAAK,CAAC4B,EAAYgC,EAAI7C,OACtCoL,EAAgBnM,KAAK,CAAC+K,EAAgBF,EAAU9J,WAYjD,CACH,IAAMsL,EAAqBJ,GAAgBtI,EAAI5B,WAAa,IACpD4B,EAAI7B,UAAU+B,MAAK,SAAAC,GAAC,OAAIA,EAAElC,aAAekJ,EAAkBnB,GAAyB,eAAX7F,EAAE/C,QACnF,GAAoB,IAAf4I,IAAqBsC,GAAgBtI,EAAI5B,WAAa,GACnDsK,GAAsBzK,IAAekJ,EACzC,iBAEJ,IAAMwB,EAAgB1K,GAAcoK,GAAkBpK,EAAa+H,EAAaqC,EAChF,GAAiB,eAAbpI,EAAI7C,MAA0BuL,EAM3B,CAMH,IAJIvB,EADa,cAAbnH,EAAI7C,KACaa,EAAa+H,EAEbA,GAAcqC,EAAiBpK,IAE/B+B,EAAI3B,kBACrB,iBASJ,GAPiBK,EAAWnC,GAAU2D,MAAK,SAAAC,GACvC,QAAKA,IAGEA,EAAEpE,QAAUqL,GAAkBjH,EAAEhD,QAC9Bc,EAAakC,EAAEhD,OAAsB,cAAb8C,EAAI7C,MAAsC,eAAb6C,EAAI7C,UAGlE,iBAEJ8J,EAAYxI,EAAWnC,GAAU6K,QAtBjC,IADAF,EAAY1I,EADZ4I,GAAkBnJ,EAAa+H,GAAc,KAE/BjK,SAAWQ,EACrB,iBAuBR,IAAMkM,EAAOzB,EAAc/I,EAAYgC,EAAI7C,KAAM8J,EAAWlJ,EAAUgC,EAAI3B,kBAAmB8I,GAC7FoB,EAAWlM,KAAKoM,GAChBD,EAAgBnM,KAAK,CAAC4B,EAAYgC,EAAI7C,OACtCoL,EAAgBnM,KAAK,CAAC+K,EAAgBF,EAAU9J,SAlExD,2BAA+B,CAAC,IAAD,yDAXZ,8BAgFO,IAAtBmL,EAAWpH,OACXsB,EAASzB,GAAc5E,KAEvBqG,EAAS7B,GAAY,IACrB6B,EAASrC,EAASmI,IAClB9F,EAASpC,EAAcmI,MA+C/B,OA3CAI,qBAAU,YACFlM,GAAeE,GAAaD,GAAeE,IAAkB3B,GAAW8D,IACxEyD,EAASnC,KACTmC,EAAS9B,GAAc,OAE5B,CAACjE,EAAYC,EAAY8F,EAAU7F,EAAUL,EAAUrB,EAAQ8D,EAAQnC,IAE1E+L,qBAAU,WACFjM,GAAczB,IACdkN,IACA3F,EAAS9B,GAAc,OAE1B,CAAChE,EAAY8F,EAAU2F,EAAUlN,IAEtC0N,qBAAU,WAaFlM,GAAcE,GAAY1B,GAZR,WAClB,IAAI2N,EADoB,EAEpBC,GAAiB,IAFG,eAGPnK,GAHO,IAGxB,2BAAwB,CAAC,IAAhB8J,EAAe,QACdT,EAAaS,EAAK,GACpBT,EAAac,IACbD,EAAWJ,EACXK,EAAiBd,IAPD,8BAUxBa,EAAS,KAGTE,KAEL,CAACrM,EAAYE,EAAU1B,EAAQyB,EAAYgC,IAE9CiK,qBAAU,WACF/L,IACA+B,EAAWoK,SAAQ,SAAAC,GAAE,OAAIxG,EAAS3B,GAAQmI,OAC1CxG,EAAS5B,IAAkB,IACvB/B,IACA2D,EAASzB,GAAc5E,IACvBqG,EAAS1B,IAAkB,QAGpC,CAAC0B,EAAU3D,EAAgBF,EAAYxC,EAAsBS,IAEzD,yBClTX,IAAMqM,GAAU/G,IAAOgH,KAAV,gJAMPC,GAASjH,IAAOkH,OAAV,kGAKNC,GAAOnH,IAAOoH,KAAV,4BAEJC,GAASrH,IAAOsH,OAAV,qDAsBGC,OAlBf,WACI,OACI,gBAACR,GAAD,WACI,eAACE,GAAD,UACI,iEAEJ,gBAACE,GAAD,WACI,eAAChF,GAAD,IACA,eAACqC,GAAD,OAEJ,eAAC6C,GAAD,UACI,6DAEJ,eAACzC,GAAD,QC7BZ4C,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUhI,MAAOA,GAAjB,SACE,eAAC,GAAD,QAGJiI,SAASC,eAAe,W","file":"static/js/main.00c2f79d.chunk.js","sourcesContent":["// creates field\r\nconst createField = () => {\r\n    const field = {}\r\n    field.index = null\r\n    field.type = null\r\n    field.color = null\r\n    field.player = null\r\n    field.row = null\r\n    field.column = null\r\n    field.figIndex = []\r\n    field.isMoveFrom = false\r\n    field.isMoveTo = false\r\n    field.executeMove = null\r\n    return field\r\n}\r\n\r\n// creates playing fields\r\nconst fields = []\r\nfor (let i = 0; i < 40; i++){\r\n    const field = createField()\r\n    field.index = i\r\n    field.type = 'boardField'\r\n    field.color = 'white'\r\n    switch(i){\r\n        case 0:\r\n            field.row = 1\r\n            field.column = 7\r\n            break\r\n        case 1:\r\n            field.row = 2\r\n            field.column = 7\r\n            break\r\n        case 2:\r\n            field.row = 3\r\n            field.column = 7\r\n            break\r\n        case 3:\r\n            field.row = 4\r\n            field.column = 7\r\n            break\r\n        case 4:\r\n            field.row = 5\r\n            field.column = 7\r\n            break\r\n        case 5:\r\n            field.row = 5\r\n            field.column = 8\r\n            break\r\n        case 6:\r\n            field.row = 5\r\n            field.column = 9\r\n            break\r\n        case 7:\r\n            field.row = 5\r\n            field.column = 10\r\n            break\r\n        case 8:\r\n            field.row = 5\r\n            field.column = 11\r\n            break\r\n        case 9:\r\n            field.row = 6\r\n            field.column = 11\r\n            break\r\n        case 10:\r\n            field.row = 7\r\n            field.column = 11\r\n            break\r\n        case 11:\r\n            field.row = 7\r\n            field.column = 10\r\n            break\r\n        case 12:\r\n            field.row = 7\r\n            field.column = 9\r\n            break\r\n        case 13:\r\n            field.row = 7\r\n            field.column = 8\r\n            break\r\n        case 14:\r\n            field.row = 7\r\n            field.column = 7\r\n            break\r\n        case 15:\r\n            field.row = 8\r\n            field.column = 7\r\n            break\r\n        case 16:\r\n            field.row = 9\r\n            field.column = 7\r\n            break\r\n        case 17:\r\n            field.row = 10\r\n            field.column = 7\r\n            break\r\n        case 18:\r\n            field.row = 11\r\n            field.column = 7\r\n            break\r\n        case 19:\r\n            field.row = 11\r\n            field.column = 6\r\n            break\r\n        case 20:\r\n            field.row = 11\r\n            field.column = 5\r\n            break\r\n        case 21:\r\n            field.row = 10\r\n            field.column = 5\r\n            break\r\n        case 22:\r\n            field.row = 9\r\n            field.column = 5\r\n            break\r\n        case 23:\r\n            field.row = 8\r\n            field.column = 5\r\n            break\r\n        case 24:\r\n            field.row = 7\r\n            field.column = 5\r\n            break\r\n        case 25:\r\n            field.row = 7\r\n            field.column = 4\r\n            break\r\n        case 26:\r\n            field.row = 7\r\n            field.column = 3\r\n            break\r\n        case 27:\r\n            field.row = 7\r\n            field.column = 2\r\n            break\r\n        case 28:\r\n            field.row = 7\r\n            field.column = 1\r\n            break\r\n        case 29:\r\n            field.row = 6\r\n            field.column = 1\r\n            break\r\n        case 30:\r\n            field.row = 5\r\n            field.column = 1\r\n            break\r\n        case 31:\r\n            field.row = 5\r\n            field.column = 2\r\n            break\r\n        case 32:\r\n            field.row = 5\r\n            field.column = 3\r\n            break\r\n        case 33:\r\n            field.row = 5\r\n            field.column = 4\r\n            break\r\n        case 34:\r\n            field.row = 5\r\n            field.column = 5\r\n            break\r\n        case 35:\r\n            field.row = 4\r\n            field.column = 5\r\n            break\r\n        case 36:\r\n            field.row = 3\r\n            field.column = 5\r\n            break\r\n        case 37:\r\n            field.row = 2\r\n            field.column = 5\r\n            break\r\n        case 38:\r\n            field.row = 1\r\n            field.column = 5\r\n            break\r\n        case 39:\r\n            field.row = 1\r\n            field.column = 6\r\n            break\r\n        default:\r\n            alert('cannot assign a place to this field')\r\n    }\r\n    fields.push(field)\r\n}\r\n\r\nconst getField = (index, type, player, row, column) => {\r\n    const field = createField()\r\n    field.index = index\r\n    field.type = type\r\n    field.color = player\r\n    field.row = row\r\n    field.column = column\r\n    return field   \r\n}\r\n\r\nconst getStartFields = (player, row, column) => {\r\n    let startFieldsForPlayer = [null]\r\n    startFieldsForPlayer.push(getField(1, 'startField', player, row, column))\r\n    startFieldsForPlayer.push(getField(2, 'startField', player, row + 1, column))\r\n    startFieldsForPlayer.push(getField(3, 'startField', player, row, column + 1))\r\n    startFieldsForPlayer.push(getField(4, 'startField', player, row + 1, column + 1))\r\n    return startFieldsForPlayer\r\n}\r\n\r\n// creates start fields\r\nconst playerStart = {\r\n    yellow: getStartFields('yellow', 1, 10),\r\n    red: getStartFields('red', 10, 10),\r\n    green: getStartFields('green', 10, 1),\r\n    blue: getStartFields('blue', 1, 1)\r\n}\r\n\r\n// creates home fields\r\nconst playerHome = {\r\n    yellow: [null],\r\n    red: [null],\r\n    green: [null],\r\n    blue: [null]\r\n}\r\n\r\nplayerHome.yellow.push(getField(1, 'homeField', 'yellow', 2, 6))\r\nplayerHome.yellow.push(getField(2, 'homeField', 'yellow', 3, 6))\r\nplayerHome.yellow.push(getField(3, 'homeField', 'yellow', 4, 6))\r\nplayerHome.yellow.push(getField(4, 'homeField', 'yellow', 5, 6,))\r\nplayerHome.red.push(getField(1, 'homeField', 'red', 6, 10))\r\nplayerHome.red.push(getField(2, 'homeField', 'red', 6, 9))\r\nplayerHome.red.push(getField(3, 'homeField', 'red', 6, 8))\r\nplayerHome.red.push(getField(4, 'homeField', 'red', 6, 7))\r\nplayerHome.green.push(getField(1, 'homeField', 'green', 10, 6))\r\nplayerHome.green.push(getField(2, 'homeField', 'green', 9, 6))\r\nplayerHome.green.push(getField(3, 'homeField', 'green', 8, 6))\r\nplayerHome.green.push(getField(4, 'homeField', 'green', 7, 6))\r\nplayerHome.blue.push(getField(1, 'homeField', 'blue', 6, 2))\r\nplayerHome.blue.push(getField(2, 'homeField', 'blue', 6, 3))\r\nplayerHome.blue.push(getField(3, 'homeField', 'blue', 6, 4))\r\nplayerHome.blue.push(getField(4, 'homeField', 'blue', 6, 5))\r\n\r\nexport {fields, playerStart, playerHome}\r\n","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst startSlice = createSlice({\r\n    name: 'start',\r\n    initialState: {\r\n        gameOn: false,\r\n        players: {\r\n            yellow: {\r\n                plays: true,\r\n                computerPlays: false\r\n            },\r\n            red: {\r\n                plays: true,\r\n                computerPlays: false\r\n            },\r\n            green: {\r\n                plays: true,\r\n                computerPlays: false\r\n            },\r\n            blue: {\r\n                plays: true,\r\n                computerPlays: false\r\n            }\r\n        }\r\n    },\r\n    reducers: {\r\n        toggleGameOn: (state, action) => {\r\n            state.gameOn = !state.gameOn\r\n        },\r\n        togglePlayerPlays: (state, action) => {\r\n            const player = action.payload\r\n            state.players[player].plays = !state.players[player].plays\r\n        },\r\n        toggleComputerPlays: (state, action) => {\r\n            const player = action.payload\r\n            state.players[player].computerPlays = !state.players[player].computerPlays\r\n        }\r\n    }\r\n})\r\n\r\nexport const selectParticipatingPlayers = state => {\r\n    const players = state.start.players\r\n    const participatingPlayers = []\r\n    for (let player in players) {\r\n        if (players[player].plays) {\r\n            participatingPlayers.push(player)\r\n        }\r\n    }\r\n    return participatingPlayers\r\n}\r\n\r\nexport const selectComputerOn = state => {\r\n    const playerOn = state.board.playerOn\r\n    const computerOn = state.start.players[playerOn].computerPlays\r\n    return computerOn\r\n}\r\n\r\nexport const selectReadyToClickOnDice = state => {\r\n    const computerOn = selectComputerOn(state) \r\n    const readyToClickOnDice = state.start.gameOn && !computerOn && !state.board.diceThrown && !state.board.gotMoves && !state.board.readyToCleanUp\r\n    return readyToClickOnDice\r\n}\r\n\r\nexport default startSlice.reducer;\r\nexport const {toggleGameOn, togglePlayerPlays, toggleComputerPlays} = startSlice.actions;\r\n","import styled from 'styled-components'\r\n\r\n// functions to initialize and keep track of player positions\r\nconst getFig = (num, player) => {\r\n    return {\r\n        figIndex: num,\r\n        player: player,\r\n        type: 'startField',\r\n        fieldIndex: num\r\n    }\r\n}\r\n\r\nconst getPositions = player => {\r\n    let positions = []\r\n    for (let num=1; num<5; num++) {\r\n        positions.push(getFig(num, player))\r\n    }\r\n    return positions\r\n}\r\n\r\nexport const positions = {}\r\nfor (let player of ['yellow', 'red', 'green', 'blue']) {\r\n    positions[player] = {\r\n        positions: getPositions(player),\r\n        numFigsOut: 0,\r\n        lastFreeHomeField: 4\r\n    }\r\n}\r\n\r\n// colors for home and start fields\r\nexport const fieldColors = {\r\n    yellow: 'moccasin',\r\n    red: 'salmon',\r\n    green: 'lightgreen',\r\n    blue: 'lightblue'\r\n}\r\n\r\n// creates a field element\r\nexport const getFieldContainer = (row, column, fieldColor, borderColor, borderWidth, borderStyle, cursor) => {\r\n    return styled.div`\r\n        grid-row-start: ${row};\r\n        grid-column-start: ${column};\r\n        border-radius: 50%;\r\n        border-color: ${borderColor};\r\n        border-width: ${borderWidth};\r\n        border-style: ${borderStyle};\r\n        background-color: ${fieldColor};\r\n        cursor: ${cursor};\r\n        @media only screen and (max-width: 600px) {\r\n            border-width: ${borderColor === 'black' ? '0.8vw' : 'none'};\r\n        }\r\n    `\r\n}\r\n","import {createSlice} from '@reduxjs/toolkit';\r\nimport {fields, playerStart, playerHome} from './GetField.js';\r\nimport {positions} from './BoardFunctions.js'\r\n\r\nconst boardSlice = createSlice({\r\n    name: 'board',\r\n    initialState: {\r\n        boardFields: fields,\r\n        startFields: playerStart,\r\n        homeFields: playerHome,\r\n        positions: positions,\r\n        moves: [],\r\n        moveFields: [],\r\n        dice: 3,\r\n        playerOn: 'blue',\r\n        diceThrown: false,\r\n        gotMoves: false,\r\n        readyToCleanUp: false,\r\n        goToNextPlayer: false,\r\n        diceCount: 0,\r\n        hasWon: null,\r\n        mouseOverMoveFrom: false,\r\n        figIndexMouse: null\r\n    },\r\n    reducers: {\r\n        updateBoardFields: (state, action) => {\r\n            state.boardFields = action.payload\r\n        },\r\n        updateStartFields: (state, action) => {\r\n            state.startFields = action.payload\r\n        },\r\n        updateHomeFields: (state, action) => {\r\n            state.homeFields = action.payload\r\n        },\r\n        updatePositions: (state, action) => {\r\n            state.positions = action.payload\r\n        },\r\n        updateFieldAfterDiceThrown: (state, action) => {\r\n            const {fieldIndex, type, isMoveFrom, isMoveTo, figIndex, executeMove} = action.payload\r\n            let field\r\n            const playerOn = state.playerOn\r\n            if (type === 'boardField') {\r\n                field = state.boardFields[fieldIndex]\r\n            } else if (type === 'startField') {\r\n                field = state.startFields[playerOn][fieldIndex]\r\n            } else {\r\n                field = state.homeFields[playerOn][fieldIndex]\r\n            }\r\n            field.isMoveFrom = isMoveFrom\r\n            field.isMoveTo = isMoveTo\r\n            field.figIndex.push(figIndex)\r\n            field.executeMove = executeMove\r\n        },\r\n        updateFieldAfterMove: (state, action) => {\r\n            const {fieldIndex, type, player} = action.payload\r\n            let field, playerOnField\r\n            player ? playerOnField = player : playerOnField = state.playerOn\r\n            if (type === 'boardField') {\r\n                field = state.boardFields[fieldIndex]\r\n            } else if (type === 'startField') {\r\n                field = state.startFields[playerOnField][fieldIndex]\r\n            } else {\r\n                field = state.homeFields[playerOnField][fieldIndex]\r\n            }\r\n            field.player = player\r\n        },\r\n        updatePosition: (state, action) => {\r\n            const {player, figIndex, fieldIndex, type, changeNumFigsOut, decrementLastFreeHomeField} = action.payload\r\n            const pos = state.positions[player]\r\n            const fig = pos.positions.find(f => f.figIndex === figIndex)\r\n            fig.fieldIndex = fieldIndex\r\n            fig.type = type\r\n            if (changeNumFigsOut === 'increment') {\r\n                pos.numFigsOut++\r\n            } else if (changeNumFigsOut === 'decrement') {\r\n                pos.numFigsOut--\r\n            }\r\n            if (decrementLastFreeHomeField) {\r\n                pos.lastFreeHomeField--\r\n            }\r\n        },\r\n        setMoves: (state, action) => {\r\n            state.moves = action.payload\r\n        },\r\n        setMoveFields: (state, action) => {\r\n            state.moveFields = action.payload\r\n        },\r\n        throwDice: (state, action) => {\r\n            const result = Math.floor(Math.random() * 6) + 1\r\n            state.dice = result\r\n        },\r\n        setDiceThrown: (state, action) => {\r\n            state.diceThrown = action.payload\r\n        },\r\n        setGotMoves: (state, action) => {\r\n            state.gotMoves = action.payload\r\n        },\r\n        setReadyToCleanUp: (state, action) => {\r\n            state.readyToCleanUp = action.payload\r\n        },\r\n        cleanUp: (state, action) => {\r\n            const [fieldIndex, type] = action.payload\r\n            let field\r\n            if (type === 'boardField') {\r\n                field = state.boardFields[fieldIndex]\r\n            } else if (type === 'startField') {\r\n                field = state.startFields[state.playerOn][fieldIndex]\r\n            } else {\r\n                field = state.homeFields[state.playerOn][fieldIndex]\r\n            }\r\n            field.isMoveFrom = false\r\n            field.isMoveTo = false\r\n            field.executeMove = null\r\n            field.figIndex = []\r\n        },\r\n        setGoToNextPlayer: (state, action) => {\r\n            state.goToNextPlayer = action.payload\r\n        },\r\n        getNextPlayer: (state, action) => {\r\n            const participatingPlayers = action.payload\r\n            const playerOn = state.playerOn\r\n            const currentIndex = participatingPlayers.indexOf(playerOn)\r\n            const nextIndex = (currentIndex + 1) % participatingPlayers.length\r\n            state.playerOn = participatingPlayers[nextIndex]\r\n        },\r\n        getInitialPlayer: (state, action) => {\r\n            const participatingPlayers = action.payload\r\n            const initialPlayerIndex = Math.floor(Math.random() * participatingPlayers.length)\r\n            state.playerOn = participatingPlayers[initialPlayerIndex]            \r\n        },\r\n        incrementDiceCount: (state, action) => {\r\n            state.diceCount++\r\n        },\r\n        resetDiceCount: (state, action) => {\r\n            state.diceCount = 0\r\n        },\r\n        setHasWon: (state, action) => {\r\n            const winner = action.payload\r\n            state.hasWon = winner\r\n        },\r\n        setMouseOver: (state, action) => {\r\n            state.mouseOverMoveFrom = true\r\n            state.figIndexMouse = action.payload\r\n        },\r\n        setMouseOut: (state, action) => {\r\n            state.mouseOverMoveFrom = false\r\n            state.figIndexMouse = null\r\n        },\r\n        resetValues: (state, action) => {\r\n            state.diceThrown = false\r\n            state.gotMoves = false\r\n            state.readyToCleanUp = false\r\n            state.goToNextPlayer = false\r\n            state.hasWon = null\r\n            state.mouseOverMoveFrom = false\r\n        }\r\n    }\r\n})\r\n\r\nexport default boardSlice.reducer;\r\nexport const {\r\n    updateBoardFields,\r\n    updateStartFields,\r\n    updateHomeFields,\r\n    updatePositions,\r\n    updateFieldAfterDiceThrown,\r\n    updateFieldAfterMove,\r\n    updatePosition,\r\n    setMoves,\r\n    setMoveFields,\r\n    throwDice,\r\n    setDiceThrown,\r\n    setGotMoves,\r\n    setReadyToCleanUp,\r\n    cleanUp,\r\n    getNextPlayer,\r\n    setGoToNextPlayer,\r\n    getInitialPlayer,\r\n    incrementDiceCount,\r\n    resetDiceCount,\r\n    setHasWon,\r\n    setMouseOver,\r\n    setMouseOut,\r\n    resetValues\r\n} = boardSlice.actions;\r\n","import {configureStore} from '@reduxjs/toolkit';\r\nimport startReducer from './features/start/StartSlice.js';\r\nimport boardReducer from './features/board/BoardSlice.js';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        start: startReducer,\r\n        board: boardReducer\r\n    }\r\n})\r\n","import styled from 'styled-components'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {togglePlayerPlays, toggleComputerPlays} from './StartSlice.js'\r\n\r\nconst Form = styled.form`\r\n    margin-bottom: 3px;\r\n`\r\n\r\nconst Radio = styled.div`\r\n    margin-left: 20px;\r\n`\r\n\r\nexport function Player(props) {\r\n    const {player} = props\r\n    const playerLabels = {yellow: 'Yellow', red: 'Red', green: 'Green', blue: 'Blue'}\r\n    const dispatch = useDispatch()\r\n    const players = useSelector(state => state.start.players)\r\n\r\n    const handleCheckbox = () => {\r\n        dispatch(togglePlayerPlays(player))\r\n    }\r\n\r\n    const handleRadio = () => {\r\n        dispatch(toggleComputerPlays(player))\r\n    }\r\n\r\n    return (\r\n        <Form data-testid={'select-' + player}>\r\n            <input\r\n                type='checkbox'\r\n                id={player}\r\n                name={player}\r\n                onChange={handleCheckbox}\r\n                checked={players[player].plays}\r\n            />\r\n            <label for={player}>{playerLabels[player]}</label>\r\n            <br />\r\n            <Radio>\r\n                <input\r\n                    type='radio'\r\n                    id={'human-' + player}\r\n                    name={'radio-' + player}\r\n                    value='human'\r\n                    onChange={handleRadio}\r\n                    checked={!players[player].computerPlays}\r\n                    disabled={!players[player].plays}\r\n                />\r\n                <label style={{marginRight: '10px'}} for={'human-' + player}>Human</label>\r\n                <input\r\n                    type='radio'\r\n                    id={'computer-' + player}\r\n                    name={'radio-' + player}\r\n                    value='computer'\r\n                    onChange={handleRadio}\r\n                    checked={players[player].computerPlays}\r\n                    disabled={!players[player].plays}\r\n                    data-testid={player + '-computer'}\r\n                />\r\n                <label for={'computer-' + player}>Computer</label>\r\n            </Radio>\r\n        </Form>\r\n    )\r\n}\r\n","import styled from 'styled-components'\r\nimport {cloneDeep} from 'lodash'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {positions} from '../board/BoardFunctions.js'\r\nimport {toggleGameOn, selectParticipatingPlayers} from './StartSlice.js'\r\nimport {\r\n    updateBoardFields,\r\n    updateStartFields,\r\n    updateHomeFields,\r\n    updatePositions,\r\n    getInitialPlayer,\r\n    resetValues\r\n} from '../board/BoardSlice.js'\r\n\r\nconst Bttn = styled.button`\r\n    color: white;\r\n    background-color: darkgreen;\r\n    font-size: 1.5em;\r\n    margin-top: 10px;\r\n    cursor: pointer;\r\n`\r\n\r\nexport function StartButton() {\r\n    const dispatch = useDispatch()\r\n    const gameOn = useSelector(state => state.start.gameOn)\r\n    const boardFields = cloneDeep(useSelector(state => state.board.boardFields))\r\n    const startFields = cloneDeep(useSelector(state => state.board.startFields))\r\n    const homeFields = cloneDeep(useSelector(state => state.board.homeFields))\r\n    const participatingPlayers = useSelector(selectParticipatingPlayers)\r\n\r\n    // disables the button if less than two players are selected\r\n    let buttonDisabled = participatingPlayers.length < 2 \r\n    const style = buttonDisabled ? {backgroundColor: 'grey', cursor: 'inherit'} : null\r\n\r\n    // function to start a new game when clicking on the start button\r\n    const startNewGame = () => {\r\n        for (let startFieldsForPlayer in startFields) {\r\n            for (let field of startFields[startFieldsForPlayer]) {\r\n                if (!field) {\r\n                    continue\r\n                }\r\n                if (participatingPlayers.includes(field.color)) {\r\n                    field.player = field.color\r\n                } else {\r\n                    field.player = null\r\n                }\r\n            }\r\n        }\r\n        for (let field of boardFields) {\r\n            field.player = null\r\n        }\r\n        for (let homeFieldsForPlayer in homeFields) {\r\n            for (let field of homeFields[homeFieldsForPlayer]) {\r\n                if (!field) {\r\n                    continue\r\n                }\r\n            field.player = null\r\n            }\r\n        } \r\n        dispatch(updateBoardFields(boardFields))\r\n        dispatch(updateStartFields(startFields))\r\n        dispatch(updateHomeFields(homeFields))\r\n        dispatch(updatePositions(positions))\r\n        dispatch(getInitialPlayer(participatingPlayers))\r\n        dispatch(resetValues())\r\n        dispatch(toggleGameOn())\r\n    }\r\n\r\n    return <Bttn\r\n        type='button'\r\n        onClick={startNewGame}\r\n        disabled={buttonDisabled}\r\n        style={style}\r\n        data-testid={'start-button'}\r\n    >{gameOn ? 'New Game' : 'Start'}</Bttn>\r\n}\r\n","import styled from 'styled-components'\r\nimport {useSelector} from 'react-redux'\r\n\r\nconst DisplayContainer = styled.div`\r\n    max-width: 350px;\r\n`\r\n\r\nexport function Display() {\r\n    const gameOn = useSelector(state => state.start.gameOn)\r\n    const playerOn = useSelector(state => state.board.playerOn)\r\n    const hasWon = useSelector(state => state.board.hasWon)\r\n    const playerNames = {yellow: 'Yellow', red: 'Red', green: 'Green', blue: 'Blue'}\r\n    const initialText = 'Select the players you want to play and the players the computer is to play.'\r\n    const nextPlayerText = `It's ${playerNames[playerOn]}'s turn.` \r\n    const hasWonText = `Congratulations! ${playerNames[hasWon]} has won.`  \r\n\r\n    let text\r\n    if (!gameOn) {\r\n        text = initialText\r\n    } else {\r\n        !hasWon ? text = nextPlayerText : text = hasWonText\r\n    }\r\n\r\n    return (\r\n        <DisplayContainer>\r\n            <p>{text}</p>\r\n        </DisplayContainer>\r\n    )\r\n}\r\n","import styled from 'styled-components'\r\nimport {useSelector} from 'react-redux'\r\nimport {Player} from './Player.js'\r\nimport {StartButton} from './StartButton.js'\r\nimport {Display} from './Display.js'\r\n\r\nconst StartContainer = styled.div`\r\n    margin-bottom: 20px;\r\n    @media only screen and (max-width: 600px) {\r\n        font-size: 1.4em;\r\n    }\r\n`\r\n\r\nexport function Start() {\r\n    const gameOn = useSelector(state => state.start.gameOn)\r\n    const allPlayers = ['yellow', 'red', 'green', 'blue']\r\n\r\n    return (\r\n        <StartContainer>\r\n            <div style={{display: gameOn? 'none' : 'block'}}>\r\n                {allPlayers.map(player => <Player player={player}  />)}\r\n            </div>\r\n            <StartButton />\r\n            <Display />\r\n        </StartContainer>\r\n    )\r\n}\r\n","import {useSelector, useDispatch} from 'react-redux'\r\nimport {fieldColors, getFieldContainer} from './BoardFunctions.js'\r\nimport {setMouseOver, setMouseOut} from './BoardSlice.js'\r\n\r\nexport function Field(props) {\r\n    const {index, row, column, type, color} = props\r\n    const dispatch = useDispatch()\r\n\r\n    // selects field-specific values from the global state\r\n    const field = useSelector(state => {\r\n        let field\r\n        if (type === 'boardField') {\r\n            field = state.board.boardFields[index]\r\n        } else if (type === 'startField') {\r\n            field = state.board.startFields[color][index]\r\n        } else {\r\n            field = state.board.homeFields[color][index]\r\n        }\r\n        return field\r\n    }) \r\n    const {player, isMoveFrom, isMoveTo, figIndex, executeMove} = field\r\n    const readyToMove = useSelector(state => isMoveFrom && state.board.gotMoves)\r\n    const displayDottedBorder = useSelector(state => {\r\n        const playerOn = state.board.playerOn\r\n        const computerOn = state.start.players[playerOn].computerPlays\r\n        return isMoveTo && state.board.mouseOverMoveFrom && !computerOn && figIndex.includes(state.board.figIndexMouse)\r\n    })\r\n    const playerOn = useSelector(state => displayDottedBorder ? state.board.playerOn : null)\r\n\r\n    // sets the field color displayed\r\n    let fieldColor = color\r\n    if (player) {\r\n        fieldColor = player\r\n    } else if (color !== 'white') {\r\n        fieldColor = fieldColors[color]\r\n    }\r\n\r\n    // sets border\r\n    let borderColor, borderWidth, borderStyle\r\n    if (displayDottedBorder) {\r\n        borderColor = playerOn\r\n        borderWidth = '5px'\r\n        borderStyle = 'dotted'\r\n    } else if (index % 10 === 0) {\r\n        borderColor = 'black'\r\n        borderWidth = '4px'\r\n        borderStyle = 'solid'\r\n    } else {\r\n        borderColor = 'none'\r\n        borderWidth = 'none'\r\n        borderStyle = 'none'\r\n    }\r\n\r\n    // sets cursor\r\n    const cursor = readyToMove ? 'pointer' : 'inherit'\r\n\r\n    // creates field\r\n    const FieldContainer = getFieldContainer(\r\n        row,\r\n        column,\r\n        fieldColor,\r\n        borderColor,\r\n        borderWidth,\r\n        borderStyle,\r\n        cursor\r\n    )\r\n\r\n    const handleMouseOver = () => {\r\n        if (readyToMove && !('ontouchstart' in window)) {\r\n            dispatch(setMouseOver(figIndex[0]))\r\n        }\r\n    }\r\n\r\n    const handleMouseOut = () => {\r\n        dispatch(setMouseOut())\r\n    }\r\n\r\n    const handleClick = () => {\r\n        if (readyToMove) {\r\n            executeMove()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FieldContainer\r\n            onMouseOver={handleMouseOver}\r\n            onMouseOut={handleMouseOut}\r\n            onClick={handleClick}\r\n        />\r\n    )\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const DiceContainer = styled.div`\r\n    @keyframes diceLightUp {\r\n        from {\r\n            background-color: lightgrey;\r\n        }\r\n        to {\r\n            background-color: white;\r\n        }\r\n    }\r\n    display: inline-grid;\r\n    position: relative;\r\n    right: 130px;\r\n    bottom: 130px;\r\n    width: 36px;\r\n    height: 36px;\r\n    grid-template-columns: repeat(3, 10px);\r\n    grid-template-rows: repeat(3, 10px);\r\n    gap: 3px;\r\n    padding: 8px;\r\n    border: black 2px solid;\r\n    border-radius: 15%;\r\n    background-color: lightgrey;\r\n    grid-area: 6/6/span 1/span 1;\r\n    @media only screen and (max-width: 600px) {\r\n        right: 25vw;\r\n        bottom: 25vw;\r\n        width: 7vw;\r\n        height: 7vw;\r\n        grid-template-columns: repeat(3, 2vw);\r\n        grid-template-rows: repeat(3, 2vw);\r\n        gap: 0.5vw;\r\n        padding: 1.5vw;\r\n        border: black 0.6vw solid;\r\n    }\r\n`\r\n\r\nconst getDiceDot = (key, row, column, dice) => {\r\n    let visibility = 'hidden'\r\n    switch(dice) {\r\n        case 1:\r\n            if (key === 22) {\r\n                visibility = 'visible'\r\n            }\r\n            break\r\n        case 2:\r\n            if (key === 31 || key === 13) {\r\n                visibility = 'visible'\r\n            }\r\n            break\r\n        case 3:\r\n            if (key === 31 || key === 22 || key === 13) {\r\n                visibility = 'visible'\r\n            }\r\n            break\r\n        case 4:\r\n            if (key === 11 || key === 31 || key === 13 || key === 33) {\r\n                visibility = 'visible'\r\n            }\r\n            break\r\n        case 5:\r\n            if (key === 11 || key === 31 || key === 22 || key === 13 || key === 33) {\r\n                visibility = 'visible'\r\n            }\r\n            break\r\n        case 6:\r\n            if (key === 11 || key === 31 || key === 21 || key === 23 || key === 13 || key === 33) {\r\n                visibility = 'visible'\r\n            }\r\n            break\r\n        default: alert('no dice')\r\n        }\r\n    const Dot = styled.div`\r\n        grid-row-start: ${row};\r\n        grid-column-start: ${column};\r\n        border-radius: 50%;\r\n        background-color: black;\r\n        visibility: ${visibility};\r\n    `\r\n    return <Dot key={key} />\r\n}\r\n\r\nexport const getDiceDots = dice => {\r\n    let diceDots = []\r\n    let key\r\n    for (let i=1; i<4; i++){\r\n        for (let j=1; j<4; j++){\r\n            key = i * 10 + j\r\n            diceDots.push(getDiceDot(key, i, j, dice))\r\n        }\r\n    }\r\n    return diceDots\r\n}\r\n","import {useState} from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {DiceContainer, getDiceDots} from './CreateDice.js'\r\nimport {selectReadyToClickOnDice} from '../start/StartSlice.js'\r\nimport {throwDice, setDiceThrown} from './BoardSlice.js'\r\n\r\nexport function Dice() {\r\n    const dispatch = useDispatch()\r\n    const diceResult = useSelector(state => state.board.dice)\r\n    const playerOn = useSelector(state => state.board.playerOn)\r\n    const readyToClickOnDice = useSelector(selectReadyToClickOnDice)\r\n    const diceWhite = useSelector(state => state.board.diceThrown || state.board.gotMoves)\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n\r\n    // sets position of dice\r\n    let right, bottom\r\n    const onPhone = window.innerWidth <= 600\r\n    if (playerOn === 'yellow') {\r\n        right = onPhone ? '-19vw' : '-115px'\r\n        bottom = onPhone ? '23vw' : '130px'\r\n    } else if (playerOn === 'red') {\r\n        right = onPhone ? '-19vw' : '-115px'\r\n        bottom = onPhone ? '-18vw' : '-110px'\r\n    } else if (playerOn === 'green') {\r\n        right = onPhone ? '23vw' : '130px'\r\n        bottom = onPhone ? '-18vw' : '-110px'\r\n    } else {\r\n        right = onPhone ? '23vw' : '130px'\r\n        bottom = onPhone ? '23vw' : '130px'\r\n    }\r\n    \r\n    const style = {\r\n        right: right,\r\n        bottom: bottom,\r\n        cursor: readyToClickOnDice ? 'pointer' : 'inherit',\r\n        backgroundColor: diceWhite ? 'white' : 'lightgrey',\r\n        animation: isPlaying ? 'diceLightUp 400ms ease-out 0s 1 normal forwards' : 'unset'\r\n    }\r\n\r\n    const handleClick = () => {\r\n      if (readyToClickOnDice) {\r\n        setIsPlaying(true)\r\n        dispatch(throwDice())\r\n        dispatch(setDiceThrown(true))\r\n      }\r\n    }\r\n\r\n    return (\r\n        <DiceContainer\r\n            onClick={handleClick}\r\n            style={style}\r\n            data-testid={'dice'}\r\n            onAnimationEnd={() => {setIsPlaying(false)}}\r\n        >\r\n            {getDiceDots(diceResult)}\r\n        </DiceContainer>\r\n    )\r\n}\r\n","import styled from 'styled-components'\r\nimport {Field} from './Field.js'\r\nimport {Dice} from './Dice.js'\r\nimport {fields, playerStart, playerHome} from './GetField.js';\r\n\r\nconst BoardContainer = styled.div`\r\n    display: inline-grid;\r\n    max-width: 490px;\r\n    padding: 20px;\r\n    margin-left: 50px;\r\n    margin-right: 10px;\r\n    grid-template-columns: repeat(11, minmax(0, 40px));\r\n    grid-template-rows: repeat(11, minmax(0, 40px));\r\n    gap: 5px;\r\n    background-color: maroon;\r\n    @media only screen and (max-width: 600px) {\r\n        margin-left: 0px;\r\n        margin-right: 20px;\r\n        display: grid;\r\n        width: 84vw;\r\n        height: 84vw;\r\n        gap: 0.9vw;\r\n        padding: 4.2vw;\r\n    }\r\n`\r\n\r\nexport function Board() {\r\n    const getTestidParticle = array => {\r\n        if (array === fields) {\r\n            return 'field-'\r\n        } else if (array === playerStart) {\r\n            return 'startField-'\r\n        } else {\r\n            return 'homeField-'\r\n        }\r\n    }\r\n\r\n    const getFieldComponents = array => {\r\n        return (\r\n            array.map(field => {\r\n                if (!field) {\r\n                    return null\r\n                }\r\n                return <Field\r\n                    key={field.index}\r\n                    data-testid={getTestidParticle(array) + field.color + field.index}\r\n                    row={field.row}\r\n                    column={field.column}\r\n                    index={field.index}\r\n                    type={field.type}\r\n                    color={field.color}\r\n                />\r\n            })\r\n        )\r\n    }\r\n\r\n    return (\r\n        <BoardContainer>\r\n            <Dice />\r\n            {getFieldComponents(fields)}\r\n            {getFieldComponents(playerStart.yellow)}\r\n            {getFieldComponents(playerStart.red)}\r\n            {getFieldComponents(playerStart.green)}\r\n            {getFieldComponents(playerStart.blue)}\r\n            {getFieldComponents(playerHome.yellow)}\r\n            {getFieldComponents(playerHome.red)}\r\n            {getFieldComponents(playerHome.green)}\r\n            {getFieldComponents(playerHome.blue)}\r\n        </BoardContainer>\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {selectParticipatingPlayers, selectComputerOn} from './start/StartSlice.js'\r\nimport {\r\n    updateFieldAfterDiceThrown,\r\n    updateFieldAfterMove,\r\n    updatePosition,\r\n    setMoves,\r\n    setMoveFields,\r\n    throwDice,\r\n    setDiceThrown,\r\n    setGotMoves,\r\n    setReadyToCleanUp,\r\n    setGoToNextPlayer,\r\n    getNextPlayer,\r\n    incrementDiceCount,\r\n    resetDiceCount,\r\n    setHasWon,\r\n    cleanUp\r\n} from './board/BoardSlice.js'\r\n\r\nexport function ExecutiveFunction() {\r\n    const dispatch = useDispatch()\r\n    const boardFields = useSelector(state => state.board.boardFields)\r\n    const homeFields = useSelector(state => state.board.homeFields)\r\n    const positions = useSelector(state => state.board.positions)\r\n    const diceResult = useSelector(state => state.board.dice)\r\n    const diceCount = useSelector(state => state.board.diceCount)\r\n    const gameOn = useSelector(state => state.start.gameOn)\r\n    const moves = useSelector(state => state.board.moves)\r\n    const moveFields = useSelector(state => state.board.moveFields)\r\n    const playerOn = useSelector(state => state.board.playerOn)\r\n    const diceThrown = useSelector(state => state.board.diceThrown)\r\n    const gotMoves = useSelector(state => state.board.gotMoves)\r\n    const readyToCleanUp = useSelector(state => state.board.readyToCleanUp)\r\n    const goToNextPlayer = useSelector(state => state.board.goToNextPlayer)\r\n    const hasWon = useSelector(state => state.board.hasWon)\r\n    const participatingPlayers = useSelector(selectParticipatingPlayers)\r\n    const computerOn = useSelector(selectComputerOn)\r\n\r\n    // checks if an opponent is hit\r\n    const checkHit = nextField => {\r\n        if (nextField.player) {\r\n            const oppPlayer = nextField.player\r\n            const oppFig = positions[oppPlayer].positions.find(fig => fig.fieldIndex === nextField.index && fig.type === 'boardField')\r\n            const oppFieldObject = {\r\n                fieldIndex: oppFig.figIndex,\r\n                type: 'startField',\r\n                player: oppPlayer,\r\n            }\r\n            const oppPlayerObject = {\r\n                player: oppPlayer,\r\n                figIndex: oppFig.figIndex,\r\n                fieldIndex: oppFig.figIndex,\r\n                type: 'startField',\r\n                changeNumFigsOut: 'decrement',\r\n                decrementLastFreeHomeField: false\r\n            }\r\n            dispatch(updateFieldAfterMove(oppFieldObject))\r\n            dispatch(updatePosition(oppPlayerObject))\r\n        }\r\n    }\r\n\r\n    // sets move-specific values of fields\r\n    const getMoveValues = (fieldIndex, typeField, nextField, figIndex, lastFreeHomeField, entryFieldIndex) => {\r\n        const nextFieldIndex = nextField.index\r\n        const typeNextField = nextField.type\r\n        let changeNumFigsOut = null\r\n        let decrementLastFreeHomeField = false\r\n        let winning = false\r\n        if (typeField === 'startField') {\r\n            changeNumFigsOut = 'increment'\r\n        }\r\n        if (typeNextField === 'homeField' && nextFieldIndex === lastFreeHomeField) {\r\n            decrementLastFreeHomeField = true\r\n            if (lastFreeHomeField === 1) {\r\n                winning = true\r\n            }\r\n        }\r\n        const updateFieldObject = {\r\n            fieldIndex: fieldIndex,\r\n            type: typeField,\r\n            isMoveFrom: true,\r\n            isMoveTo: false,\r\n            figIndex: figIndex,\r\n            executeMove: () => {\r\n                checkHit(nextField)\r\n                const updateFieldAfterMoveObject = {\r\n                    fieldIndex: fieldIndex,\r\n                    type: typeField,\r\n                    player: null\r\n                }\r\n                const updateNextFieldAfterMoveObject = {\r\n                    fieldIndex: nextFieldIndex,\r\n                    type: typeNextField,\r\n                    player: playerOn\r\n                }\r\n                const updatePositionObject = {\r\n                    player: playerOn,\r\n                    figIndex: figIndex,\r\n                    fieldIndex: nextFieldIndex,\r\n                    type: typeNextField,\r\n                    changeNumFigsOut: changeNumFigsOut,\r\n                    decrementLastFreeHomeField: decrementLastFreeHomeField\r\n                }\r\n                dispatch(updateFieldAfterMove(updateFieldAfterMoveObject))\r\n                dispatch(updateFieldAfterMove(updateNextFieldAfterMoveObject))\r\n                dispatch(updatePosition(updatePositionObject))\r\n                dispatch(setGotMoves(false))\r\n                dispatch(setReadyToCleanUp(true))\r\n                if (winning) {\r\n                    dispatch(setHasWon(playerOn))\r\n                }\r\n                if (typeField === 'startField') {\r\n                    dispatch(resetDiceCount())\r\n                } else {\r\n                    dispatch(setGoToNextPlayer(true))\r\n                }\r\n            }\r\n        }\r\n        const updateNextFieldObject = {\r\n            fieldIndex: nextFieldIndex,\r\n            type: typeNextField,\r\n            isMoveFrom: false,\r\n            isMoveTo: true,\r\n            figIndex: figIndex,\r\n            executeMove: null\r\n        }\r\n        dispatch(updateFieldAfterDiceThrown(updateFieldObject))\r\n        dispatch(updateFieldAfterDiceThrown(updateNextFieldObject))\r\n\r\n        // calculates move rating\r\n        let moveRating = 0\r\n        if (computerOn) {\r\n            if (decrementLastFreeHomeField) {\r\n                moveRating += 10\r\n            } else if (typeNextField === 'homeField') {\r\n                moveRating += 8\r\n            } else {\r\n                if (nextField.player) {\r\n                    moveRating += 5\r\n                }\r\n                let currentIndex = fieldIndex\r\n                let count = 0\r\n                const progress = Math.floor((nextFieldIndex - entryFieldIndex) % 40 / 10) + 1\r\n                while (count < 6) {\r\n                    if ((boardFields[currentIndex].player && boardFields[currentIndex].player !== playerOn)\r\n                        || currentIndex % 10 === 0) {\r\n                        moveRating += progress\r\n                    }\r\n                    if (currentIndex === 0) {\r\n                        currentIndex = 39\r\n                    } else {\r\n                        currentIndex--\r\n                    }\r\n                    count++\r\n                }\r\n                currentIndex = nextFieldIndex\r\n                count = 0\r\n                while (count < 6) {\r\n                    if ((boardFields[currentIndex].player && boardFields[currentIndex].player !== playerOn)\r\n                        || currentIndex % 10 === 0) {\r\n                        moveRating -= progress\r\n                    }\r\n                    if (currentIndex === 0) {\r\n                        currentIndex = 39\r\n                    } else {\r\n                        currentIndex--\r\n                    }\r\n                    count++\r\n                }\r\n                moveRating += progress\r\n            }\r\n        }\r\n        return [updateFieldObject.executeMove, moveRating]\r\n    }\r\n      \r\n    // gets next available moves for player based on dice result\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const getMoves = () => {\r\n        const pos = positions[playerOn]\r\n        const entryFields = {yellow: 0, red: 10, green: 20, blue: 30}\r\n        const exitFields = {yellow: 39, red: 9, green: 19, blue: 29}  \r\n        const entryFieldIndex = entryFields[playerOn]\r\n        const exitFieldIndex = exitFields[playerOn]\r\n        const onEntryField = boardFields[entryFieldIndex].player === playerOn\r\n        let movesArray = []\r\n        let moveFieldsArray = []\r\n    \r\n        // loops through each piece to get its available move\r\n        for (let fig of pos.positions) {\r\n            const figIndex = fig.figIndex\r\n            const fieldIndex = fig.fieldIndex\r\n            let nextFieldIndex, nextField\r\n        \r\n            //if the piece is on a start field\r\n            if (fig.type === 'startField') {\r\n                if (diceResult === 6 && !onEntryField) {\r\n                    nextFieldIndex = entryFieldIndex\r\n                    nextField = boardFields[nextFieldIndex]\r\n                    if (nextField.player === playerOn) {\r\n                        continue\r\n                    }\r\n                    const move = getMoveValues(fieldIndex, fig.type, nextField, figIndex, pos.lastFreeHomeField, entryFieldIndex)\r\n                    movesArray.push(move)\r\n                    moveFieldsArray.push([fieldIndex, fig.type])\r\n                    moveFieldsArray.push([nextFieldIndex, nextField.type])      \r\n                } else if (pos.numFigsOut + pos.lastFreeHomeField === 4) {\r\n                    if (diceCount === 2) {\r\n                        dispatch(resetDiceCount())\r\n                        dispatch(getNextPlayer(participatingPlayers))\r\n                    } else {\r\n                        dispatch(incrementDiceCount())\r\n                    }\r\n                    return\r\n                }\r\n        \r\n            // if the piece is on a board field or a home field\r\n            } else {\r\n                const moveFromEntryField = onEntryField && pos.numFigsOut < 4\r\n                    && !pos.positions.find(f => f.fieldIndex === entryFieldIndex + diceResult && f.type === 'boardField')\r\n                if ((diceResult === 6 && !onEntryField && pos.numFigsOut < 4)\r\n                    || (moveFromEntryField && fieldIndex !== entryFieldIndex)) {\r\n                    continue\r\n                }\r\n                const passExitField = fieldIndex <= exitFieldIndex && fieldIndex + diceResult > exitFieldIndex\r\n                if (fig.type === 'boardField' && !passExitField) {\r\n                    nextFieldIndex = (fieldIndex + diceResult) % 40\r\n                    nextField = boardFields[nextFieldIndex]\r\n                    if (nextField.player === playerOn) {\r\n                        continue\r\n                    }\r\n                } else {\r\n                    if (fig.type === 'homeField') {\r\n                        nextFieldIndex = fieldIndex + diceResult\r\n                    } else {\r\n                        nextFieldIndex = diceResult - (exitFieldIndex - fieldIndex)\r\n                    }\r\n                    if (nextFieldIndex > pos.lastFreeHomeField) {\r\n                        continue\r\n                    }\r\n                    const inTheWay = homeFields[playerOn].find(f => {\r\n                        if (!f) {\r\n                            return false\r\n                        }\r\n                        return f.player && nextFieldIndex >= f.index\r\n                            && ((fieldIndex < f.index && fig.type === 'homeField') || fig.type === 'boardField')\r\n                    })\r\n                    if (inTheWay) {\r\n                        continue\r\n                    }\r\n                    nextField = homeFields[playerOn][nextFieldIndex]\r\n                }\r\n                const move = getMoveValues(fieldIndex, fig.type, nextField, figIndex, pos.lastFreeHomeField, entryFieldIndex)\r\n                movesArray.push(move)\r\n                moveFieldsArray.push([fieldIndex, fig.type])\r\n                moveFieldsArray.push([nextFieldIndex, nextField.type])\r\n            }\r\n        }\r\n        if (movesArray.length === 0) {\r\n            dispatch(getNextPlayer(participatingPlayers))\r\n        } else {\r\n            dispatch(setGotMoves(true))\r\n            dispatch(setMoves(movesArray))\r\n            dispatch(setMoveFields(moveFieldsArray))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (computerOn && !gotMoves && !diceThrown && !readyToCleanUp && gameOn && !hasWon) {\r\n            dispatch(throwDice())\r\n            dispatch(setDiceThrown(true))\r\n        }\r\n    }, [computerOn, diceThrown, dispatch, gotMoves, playerOn, gameOn, hasWon, readyToCleanUp])\r\n  \r\n    useEffect(() => {\r\n        if (diceThrown && gameOn) {\r\n            getMoves()\r\n            dispatch(setDiceThrown(false))\r\n        }\r\n      }, [diceThrown, dispatch, getMoves, gameOn])\r\n      \r\n    useEffect(() => {\r\n        const computerMoves = () => {\r\n            let bestMove\r\n            let bestMoveRating = -Infinity\r\n            for (let move of moves) {\r\n                const moveRating = move[1]\r\n                if (moveRating > bestMoveRating) {\r\n                    bestMove = move\r\n                    bestMoveRating = moveRating\r\n                }\r\n            }\r\n            bestMove[0]()\r\n        }\r\n        if (computerOn && gotMoves && gameOn) {\r\n            computerMoves()\r\n        }\r\n    }, [computerOn, gotMoves, gameOn, diceThrown, moves])\r\n  \r\n    useEffect(() => {\r\n        if (readyToCleanUp) {\r\n            moveFields.forEach(mf => dispatch(cleanUp(mf)))\r\n            dispatch(setReadyToCleanUp(false))\r\n            if (goToNextPlayer) {\r\n                dispatch(getNextPlayer(participatingPlayers))\r\n                dispatch(setGoToNextPlayer(false))\r\n            }\r\n        }\r\n    }, [dispatch, goToNextPlayer, moveFields, participatingPlayers, readyToCleanUp])\r\n  \r\n    return <div />\r\n}\r\n","import styled from 'styled-components'\nimport {Start} from './features/start/Start.js'\nimport {Board} from './features/board/Board.js'\nimport {ExecutiveFunction} from './features/ExecutiveFunction.js'\n\nconst AppBody = styled.body`\n    background-color: white;\n    font-family: Calibri, 'Trebuchet MS', sans-serif;\n    box-sizing: border-box;\n`\n\nconst Header = styled.header`\n    font-family: 'Kaushan Script', cursive;\n    font-size: 1.3em;\n`\n\nconst Main = styled.main``\n\nconst Footer = styled.footer`\n    font-size: 0.8em;\n`\n\nfunction App() {\n    return (\n        <AppBody>\n            <Header>\n                <h1>Mensch ärgere dich nicht!</h1>\n            </Header>\n            <Main>\n                <Start />\n                <Board />\n            </Main>\n            <Footer>\n                <p>Created by Michael Oberst</p>\n            </Footer>\n            <ExecutiveFunction />\n        </AppBody>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {store} from './Store.js';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}